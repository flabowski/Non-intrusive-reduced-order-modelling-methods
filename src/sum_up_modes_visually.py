# -*- coding: utf-8 -*-
"""
Created on Fri Jan 29 10:54:22 2021

@author: florianma
"""
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from cross_validation import load_snapshots, select_random_snapsots, create_ROM, plot_up
plot_width = 8
path = "C:/Users/florianma/Documents/data/flow_around_cylinder/"

U_u, U_v, U_p, _t_all_, mu, x, y, tri = load_snapshots(path, 50)
S, U, V, M = create_ROM(U_u, U_v, U_p)

u_m = np.mean(np.mean(U_u, axis=1), axis=1)
v_m = np.mean(np.mean(U_v, axis=1), axis=1)
p_m = np.mean(np.mean(U_p, axis=1), axis=1)
modes = [u_m.copy(), v_m.copy(), p_m.copy()]
res = [u_m.copy(), v_m.copy(), p_m.copy()]
t = 250
fig, ax = plot_up(res[0], res[1], res[2], x, y, tri)
plt.suptitle("mean")
plt.show()
for mode in range(6):
    for j in range(3):
        U_hat = U[j].numpy()[:, mode]  # (n, r)
        S_hat = S[j].numpy()[mode]  # (r, r) / (r,) wo  non zero elements
        V_hat = V[j].numpy()[:, mode]  # (r, m)
        modes[j] = U_hat*S_hat*V_hat[t]
        res[j] += modes[j]
    fig, ax = plot_up(res[0], res[1], res[2], x, y, tri)
    plt.suptitle("eigen vector #{:.0f}".format(mode))
    plt.show()
    fig, ax = plot_up(res[0], res[1], res[2], x, y, tri)
    plt.suptitle("sum")
    plt.show()


res2 = 3*[9]
for j in range(3):
    U_hat = U[j].numpy()[:, :50]  # (n, r)
    S_hat = S[j].numpy()[:50]  # (r, r) / (r,) wo  non zero elements
    V_hat = V[j].numpy()[:, :50]  # (r, m)
    res2[j] = np.dot(U_hat, S_hat[:, None]*V_hat.T) + M[j].numpy()  # (n, m)
fig, ax = plot_up(res2[0][:, t], res2[1][:, t], res2[2][:, t], x, y, tri)
plt.suptitle("solution")
plt.show()

nt = np.array([[24, 0.02101], [24, 0.02182], [24, 0.02016], [24, 0.01859],
               [24, 0.01927], [24, 0.02111], [24, 0.02112], [24, 0.02457],
               [24, 0.02139], [24, 0.02492], [24, 0.02502], [24, 0.02421],
               [24, 0.02669], [24, 0.02504], [24, 0.02674], [24, 0.02108],
               [24, 0.02078], [24, 0.02082], [24, 0.02653], [24, 0.02596],
               [24, 0.02204], [40, 0.05669], [40, 0.05129], [40, 0.04650],
               [40, 0.04946], [40, 0.05767], [40, 0.05533], [40, 0.04589],
               [40, 0.05492], [40, 0.06935], [40, 0.05736], [40, 0.05920],
               [40, 0.05040], [40, 0.04701], [40, 0.04452], [40, 0.05583],
               [40, 0.07042], [40, 0.06542], [40, 0.05977], [40, 0.05430],
               [40, 0.05480], [40, 0.04954], [80, 0.13204], [80, 0.10658],
               [80, 0.10579], [80, 0.11005], [80, 0.11702], [80, 0.10570],
               [80, 0.11056], [80, 0.11886], [80, 0.09887], [80, 0.11578],
               [80, 0.11050], [80, 0.10204], [80, 0.12556], [80, 0.13192],
               [80, 0.18822], [80, 0.15299], [80, 0.13841], [80, 0.11753],
               [80, 0.11336], [80, 0.10940], [80, 0.10407], [160, 0.3187],
               [160, 0.33222], [160, 0.29878], [160, 0.33480], [160, 0.29751],
               [160, 0.28301], [160, 0.33062], [160, 0.28362], [160, 0.28661],
               [160, 0.33283], [160, 0.30049], [160, 0.29664], [160, 0.33381],
               [160, 0.28814], [160, 0.29127], [160, 0.32148], [160, 0.29906],
               [160, 0.27404], [160, 0.32752], [160, 0.28939], [160, 0.28825],
               [400, 1.59957], [400, 1.55497], [400, 1.56332], [400, 1.60819],
               [400, 1.58019], [400, 1.57251], [400, 1.62688], [400, 1.61638],
               [400, 1.59124], [400, 1.65050], [400, 1.57651], [400, 1.58723],
               [400, 1.58014], [400, 1.57698], [400, 1.57828], [400, 1.57990],
               [400, 1.55893], [400, 1.58940], [400, 1.60340], [400, 1.58472],
               [400, 1.60682], [800, 6.15971], [800, 6.18535], [800, 6.13007],
               [800, 6.16407], [800, 6.17723], [800, 6.21283], [800, 6.37584],
               [800, 6.36704], [800, 6.23833], [800, 6.14631], [800, 6.12623],
               [800, 6.11230], [800, 7.42644], [800, 6.12464], [800, 6.24404],
               [800, 6.19179], [800, 6.17546], [800, 6.11433], [800, 6.11004],
               [800, 6.13765], [800, 6.11320], [1350, 18.77255],
               [1350, 17.51561], [1350, 17.41656], [1600, 29.78023],
               [1600, 30.94421], [1600, 30.95119], [1600, 32.80824],
               [1600, 32.79666], [1600, 35.35934], [1600, 38.22602],
               [1600, 29.37166], [1600, 25.55029], [1600, 26.42816],
               [1600, 28.10765], [1600, 26.43887], [1600, 25.40938],
               [1600, 27.35498], [1600, 24.19230], [1600, 26.50496],
               [1600, 26.08298], [1600, 27.81365], [1600, 23.92604],
               [1600, 22.78573], [1600, 23.56920]])

plt.subplots(figsize=(plot_width/2.54, 10/2.54))
plt.plot(nt[:, 0], nt[:, 1], ".")
plt.xlabel("n")
plt.ylabel("run time [s]")
plt.show()
